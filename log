ID = 2

Stack
( Declaration: varf , string ;( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@56a65115

heapTable

-----------------------------------
ID = 2

Stack

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: varf , string ;( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@5c1f7de1

heapTable

-----------------------------------
ID = 1

Stack

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Assignment: v = value: int = 2; Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 2; Print( variable = v )  )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 2; Print( variable = v )  )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 2; Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 2; Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 2
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 2
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack

Symbol Table
v --> int = 2

Output
int = 2

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: varf , string ;( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@47e2f669

heapTable

-----------------------------------
ID = 2

Stack

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 3

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 3

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 3

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 3

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 4

Stack
( Declaration: v , int ;( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 4

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 4

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 4

Stack

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1
int = 0

FileTable

heapTable

-----------------------------------
ID = 5

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 5

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
New a = variable = v
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
New a = variable = v
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 5

Stack
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 5

Stack
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 5

Stack
 Print( variable = v ) 
 Print( variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 5

Stack
 Print( variable = v ) 
 Print( variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 5

Stack
 Print( variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output
ReferenceValue. address = 1 type = int

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 5

Stack
 Print( variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output
ReferenceValue. address = 1 type = int

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 5

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output
ReferenceValue. address = 1 type = int
ReferenceValue. address = 2 type = Ref( int) 

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 6

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
New a = variable = v
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
New a = variable = v
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 6

Stack
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack
 Print( ReadHeapExpression variable = v ) 
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack
 Print( ReadHeapExpression variable = v ) 
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 6

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output
int = 20
int = 25

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 7

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
( New v = value: int = 20;(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
( New v = value: int = 20;(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
New v = value: int = 20
(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
New v = value: int = 20
(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 7

Stack
(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
(  Print( ReadHeapExpression variable = v ) ;( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
 Print( ReadHeapExpression variable = v ) 
( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
 Print( ReadHeapExpression variable = v ) 
( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
( WriteHeap. v = value: int = 30; Print( ReadHeapExpression variable = v + value: int = 5 )  )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
WriteHeap. v = value: int = 30
 Print( ReadHeapExpression variable = v + value: int = 5 ) 

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
WriteHeap. v = value: int = 30
 Print( ReadHeapExpression variable = v + value: int = 5 ) 

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 7

Stack
 Print( ReadHeapExpression variable = v + value: int = 5 ) 

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 7

Stack
 Print( ReadHeapExpression variable = v + value: int = 5 ) 

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 7

Stack

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output
int = 20
int = 35

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 8

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 8

Stack
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 9

Stack
( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 9

Stack
( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 9

Stack
WriteHeap. a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 9

Stack
WriteHeap. a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 8

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 8

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 8

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 9

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
WriteHeap. a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
ForkStatement (( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
( WriteHeap. a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
WriteHeap. a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
WriteHeap. a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 3

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 4

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 4

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> ReferenceValue. address = 1 type = int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1
int = 0

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: varf , string ;( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varf , string 
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: varf = value: string= test.in;( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: varf = value: string= test.in
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= 

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( openRFile variable = varf;( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
openRFile variable = varf
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: varc , int ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
Declaration: varc , int 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 0

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
( ReadFile: name = variable = varf variable = varc;(  Print( variable = varc ) ;CloseRFile variable = varf ) )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
ReadFile: name = variable = varf variable = varc
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 10

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = varc ) ;CloseRFile variable = varf )

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = varc ) 
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack
CloseRFile variable = varf

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable
string= test.in --> java.io.BufferedReader@260e9a72

heapTable

-----------------------------------
ID = 1

Stack

Symbol Table
varf --> string= test.in
varc --> int = 20

Output
int = 10
int = 20

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 2

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 0 type = int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 0 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 1 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> ReferenceValue. address = 2 type = Ref( int) 
v --> ReferenceValue. address = 3 type = int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> ReferenceValue. address = 1 type = int
3 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  ) )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
(  Print( ReadHeapExpression variable = v ) ; Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 )  )

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression variable = v ) 
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression variable = v ) 
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a + value: int = 5 ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output
int = 20
int = 25

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1
int = 0

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
( New v = value: int = 30; Print( ReadHeapExpression ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
New v = value: int = 30
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 3 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int
3 --> int = 30

-----------------------------------
ID = 1

Stack
 Print( ReadHeapExpression ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 3 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int
3 --> int = 30

-----------------------------------
ID = 1

Stack

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 3 type= int

Output
int = 20

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int
3 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , Ref( int)  ;( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , Ref( int)  
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( New v = value: int = 20;( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
New v = value: int = 20
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 0 type= int

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( Declaration: a , Ref( Ref( int) )  ;( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
Declaration: a , Ref( Ref( int) )  
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
( New a = variable = v;(  Print( variable = v ) ; Print( variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
New a = variable = v
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> RefValue addr= 0 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ; Print( variable = a )  )

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
 Print( variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output
RefValue addr= 1 type= int

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack
 Print( variable = a ) 

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output
RefValue addr= 1 type= int

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 1

Stack

Symbol Table
a --> RefValue addr= 2 type= Ref( int) 
v --> RefValue addr= 1 type= int

Output
RefValue addr= 1 type= int
RefValue addr= 2 type= Ref( int) 

FileTable

heapTable
1 --> int = 20
2 --> RefValue addr= 1 type= int

-----------------------------------
ID = 2

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
( Declaration: v , int ;( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: v , int 
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Declaration: a , Ref( int)  ;( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Declaration: a , Ref( int)  
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( Assignment: v = value: int = 10;( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
Assignment: v = value: int = 10
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( New a = value: int = 22;( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
New a = value: int = 22
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 0 type= int
v --> int = 10

Output

FileTable

heapTable

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
( ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) ;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
ForkStatement (( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )) 
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
( WriteHeap a = value: int = 30;( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 3

Stack
WriteHeap a = value: int = 30
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output

FileTable

heapTable
1 --> int = 22

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
( Assignment: v = value: int = 32;(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  ) )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 2

Stack

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
Assignment: v = value: int = 32
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 10

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
(  Print( variable = v ) ; Print( ReadHeapExpression variable = a )  )

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( variable = v ) 
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack
 Print( ReadHeapExpression variable = a ) 

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30
int = 32

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 3

Stack

Symbol Table
a --> RefValue addr= 1 type= int
v --> int = 32

Output
int = 10
int = 30
int = 32
int = 30

FileTable

heapTable
1 --> int = 30

-----------------------------------
ID = 1

Stack
( Declaration: v , int ;( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Declaration: v , int 
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( Assignment: v = value: int = 4;( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  ) )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = value: int = 4
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 0

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( ( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) ); Print( variable = v )  )

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
( While ( variable = v > value: int = 0 ) ;(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 ) )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 4

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 3

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 2

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
Assignment: v = variable = v - value: int = 1
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 1

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
While ( variable = v > value: int = 0 ) 
(  Print( variable = v ) ;Assignment: v = variable = v - value: int = 1 )
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack
 Print( variable = v ) 

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1

FileTable

heapTable

-----------------------------------
ID = 1

Stack

Symbol Table
v --> int = 0

Output
int = 4
int = 3
int = 2
int = 1
int = 0

FileTable

heapTable

-----------------------------------
